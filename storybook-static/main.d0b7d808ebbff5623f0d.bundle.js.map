{"version":3,"file":"main.d0b7d808ebbff5623f0d.bundle.js","sources":["webpack:///./src/components/piespinner.jsx"],"sourcesContent":["//-----------------------------------------------------------------------\n// <copyright company=\"Microsoft Corporation\">\n//        Copyright (c) Microsoft Corporation.  All rights reserved.\n// </copyright>\n//-----------------------------------------------------------------------\n\nimport pick from \"lodash/pick\";\nimport React from \"react\";\nimport AnimatedNumber from \"react-animated-number\";\nimport { pure } from \"recompose\";\nimport styled, { css, keyframes } from \"styled-components\";\nimport \"../App.css\";\n\nconst OutlineCorrection = \"2px\";\n\nexport const PieSpinner = pure(props => (\n  <Layout>\n    <CircleBackground {...pick(props, \"backgroundColor\", \"height\", \"width\")} />\n    <PieWrapper {...pick(props, \"height\", \"width\")}>\n      <Spinner\n        {...pick(props, \"backgroundColor\", \"border\", \"duration\", \"isInfinite\")}\n      />\n      <RightFill\n        {...pick(props, \"backgroundColor\", \"border\", \"duration\", \"isInfinite\")}\n      />\n      <BackgroundWithLeftMask\n        {...pick(\n          props,\n          \"backgroundColor\",\n          \"duration\",\n          \"isInfinite\",\n          \"height\",\n          \"width\"\n        )}\n      />\n    </PieWrapper>\n    <StyledAnimatedNumber\n      component=\"text\"\n      initialValue={0}\n      value={100}\n      formatValue={n => percentage(n)}\n      stepPrecision={0}\n      {...pick(props, \"color\", \"duration\", \"fontSize\")}\n    />\n  </Layout>\n));\nconst Layout = styled.div`\n  width: ${props => props.width};\n  height: ${props => props.height};\n  display: grid;\n  grid-template-rows: 1fr;\n  grid-template-columns: 1fr;\n  align-items: center;\n  justify-items: center;\n`;\n\nconst FullGridMixin = css`\n  grid-row: 1 / last-line;\n  grid-column: 1 / last-line;\n`;\n\nconst AnimationInfiniteMixin = css`\n  animation-iteration-count: ${props => (props.isInfinite ? \"infinite\" : 1)};\n  animation-fill-mode: ${props => (props.isInfinite ? \"none\" : \"forwards\")};\n`;\n\nconst CircleBackground = styled.div`\n  background: ${props => props.backgroundColor};\n  border-radius: 50%;\n  width: calc(${props => props.width} - ${OutlineCorrection} - 1px);\n  height: calc(${props => props.height} - ${OutlineCorrection} - 1px);\n  ${FullGridMixin};\n`;\n\nconst Pie = styled.div`\n  width: 50%;\n  height: 100%;\n  transform-origin: 100% 50%;\n  background: ${props => props.backgroundColor};\n  border: ${props => props.border};\n  ${FullGridMixin};\n`;\n\nconst RotateAnimation = keyframes`\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n`;\n\nconst OpacityAnimation = keyframes`\n    0% {\n        opacity: 1;\n    }\n    50%,\n    100% {\n        opacity: 0;\n    }\n`;\n\nconst Spinner = styled(Pie)`\n  border-radius: 100% 0 0 100% / 50% 0 0 50%;\n  z-index: 3;\n  border-right: none;\n  animation: ${RotateAnimation} ${props => props.duration}ms linear;\n  ${AnimationInfiniteMixin};\n`;\n\nconst RightFill = styled(Pie)`\n  border-radius: 0 100% 100% 0 / 0 50% 50% 0;\n  justify-self: end;\n  opacity: 0;\n  z-index: 2;\n  animation: ${OpacityAnimation} ${props => props.duration}ms steps(1, end)\n    reverse;\n  border-left: none;\n  ${AnimationInfiniteMixin};\n`;\n\nconst BackgroundWithLeftMask = styled.div`\n  width: calc(${props => props.width} - ${OutlineCorrection});\n  height: calc(${props => props.height} - ${OutlineCorrection});\n  clip-path: polygon(0 0, 50% 0, 50% 100%, 0 100%);\n  background: ${props => props.backgroundColor};\n  align-self: center;\n  justify-self: center;\n  border-radius: 50%;\n  opacity: 1;\n  z-index: 4;\n  animation: ${OpacityAnimation} ${props => props.duration}ms steps(1, end);\n  ${FullGridMixin};\n  ${AnimationInfiniteMixin};\n`;\n\nconst PieWrapper = styled.div`\n  display: grid;\n  z-index: 1;\n  width: ${props => props.width};\n  height: ${props => props.height};\n  ${FullGridMixin};\n`;\n\nconst StyledAnimatedNumber = styled(AnimatedNumber)`\n  font-size: ${props => props.fontSize};\n  font-weight: 700;\n  z-index: 5;\n  color: ${props => props.color};\n  ${FullGridMixin};\n`;\n\nconst percentage = n => {\n  return `${n}%`;\n};\n"],"mappings":"AAaA","sourceRoot":""}